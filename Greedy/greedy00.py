# Greedy(그리디) 
'''
탐욕적인 뜻을 가진 Greedy 는 *탐욕법* 이라고도 한다. 
이는, 💡현재 상황에서 지금 당장 좋은 것만 고르는 방법이다. 

풀어서 설명하자면, 
그리디 알고리즘을 사용하면 매 순간 가장 가장 좋아보이는 것만 선택하며, 현재의 선택이 나중에 미칠 영향에 대해서는 고려하지 않는다.
그렇기 때문에 그리디 알고리즘으로 푼 답이 꼭 최적의 해가 아닐 수도 있다는 것이다. 

그렇다면, 최적의 해를 보장한다는 건 어떤 의미일까? 
'''

# 그리디 알고리즘의 대표적인 거스름돈 문제 
n = 1260 
count = 0

# 큰 단위의 화폐부터 차례대로 확인
coin_types = [500,100,50,10]

for coin in coin_types : 
  count += n // coin # 가장 큰 단위부터 나눠서 몫을 구하기 
  n %= coin # 큰 단위로부터 나눈 나머지를 구하여 다시 반복 

print(count) # 6 (500=2, 100=2, 50=1, 10=1)

'''
위의 문제풀이를 보면, 가장 큰 화폐 단위부터 돈을 거슬러주는 것을 보아 그리디 알고리즘을 썼음을 알 수 있다. 
이 문제가 왜 그리디 알고리즘으로 풀어도 최적의 해가 보장될까? 
그건 바로 가장 큰 단위가 항상 작은 단위의 배수이기 때문이다. 

예를 들어, 800원을 거슬러줘야할 때 화폐단위 [500,400,100] 일 경우 그리디알고리즘을 사용한다면 
500 = 1, 100 = 3 -> 총 4개의 동전이 나올 것이지만, 사실 최적의 해는 400 = 2 -> 총 2개의 동전이 최적의 해가 된다. 
이 때 400원은 가장 큰 단위인 500원의 배수가 아니기 때문에 그리디 알고리즘으로 최적의 해를 구할 수 없게 되는 것이다.

그렇기 때문에, 
🌟 가장 큰 단위가 항상 작은 단위의 배수 일 때, 그리디 알고리즘을 사용하는 것이 좋다는 것을 기억하자.🌟 
'''
