# Implementation (구현)
'''
구현이란, '머릿속에 있는 알고리즘을 소스코드로 바꾸는 과정'이다. 
구현 문제 유형은 모든 범위의 코딩테스트 문제유형을 포함하는 개념이 되기도 하지만, 
주로 문제해결분야 에서의 구현 유형의 문제는 '풀이를 떠올리는 것은 쉽지만 소스코드로 옮기기 어려운 문제'를 말한다. 

[구현 유형의 예시]
- 알고리즘은 간단한데 코드가 지나칠만큼 길어지는 문제 
- 실수 연산을 다루고, 특정 소수점 자리 까지 출력해야하는 문제
- 문자열을 특정한 기준에 따라서 끊어 처리해야 하는 문제
- 적절한 라이브러리를 찾아서 사용해야 하는 문제 

[대표적인 알고리즘]
- 완전 탐색 : 모든 경우의 수를 주저없이 다 계산하는 해결 방법 
- 시뮬레이션 유형 : 문제에서 제시한 알고리즘을 한 단계씩 차례대로 직접 수행해야 하는 문제유형
'''

# 상하좌우 - 대표적인 문제 

# 공간 크기 (n*n)
n = int(input()) # 5
x,y = 1,1

# 계획서 내용
plans = input().split() # r r r u d d

# L,R,U,D 에 따른 방향 리스트 
dx = [0,0,-1,1]
dy = [-1,1,0,0]
move_types = ['L','R','U','D']

# 이동 계획을 하나씩 확인하기 
for plan in plans : 
  # 이동 후 좌표 구하기 
  for i in range(len(move_types)) : 
    if plan == move_types[i] : 
      nx = x + dx[i]
      ny = y + dy[i]
  # 공간 벗어나는지 확인하기
  if nx < 1 or nx > n or ny < 1 or ny > n : 
    continue 
  # 공간을 벗어나지 않는다면 이동! 
  x,y = nx,ny 
print(x,y)
  


            






